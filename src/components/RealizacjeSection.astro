---
// Minimalist RealizacjeSection
import { getCollection } from 'astro:content';
import ProjectLightbox from './ProjectLightbox.astro';

// Get all projects
const allRealizacje = await getCollection('realizacje');

// Get unique categories
const uniqueCategories = [...new Set(allRealizacje.map(r => r.data?.category || 'inne'))];
const categories = uniqueCategories;

// Prepare data for JavaScript
const realizacjeData = allRealizacje.map(r => ({
  slug: r.slug,
  title: r.data?.title || '',
  client: r.data?.client || '',
  category: r.data?.category || 'inne',
  date: r.data?.date || '',
  featured_image: r.data?.featured_image || '',
  gallery: r.data?.gallery || [],
  description: r.data?.description || '',
  challenge: r.data?.challenge || '',
  solution: r.data?.solution || '',
  tags: r.data?.tags || []
}));

// Pagination settings
const PROJECTS_PER_PAGE = 3;
const initialProjects = realizacjeData.slice(0, PROJECTS_PER_PAGE);
const hasMoreProjects = realizacjeData.length > PROJECTS_PER_PAGE;
---

<!-- Minimal section design -->
<section class="section realizacje-section" id="realizacje">
  <div class="container">
    <!-- Simple Header -->
    <div class="section-header">
      <h2 class="section-title">Realizacje</h2>
    </div>

    <!-- Simple Category Filters -->
    <div class="category-filters">
      <button class="filter-btn active" data-category="wszystkie">
        Wszystkie
      </button>
      {categories.map(category => (
        <button class="filter-btn" data-category={category}>
          {category.charAt(0).toUpperCase() + category.slice(1)}
        </button>
      ))}
    </div>

    <!-- Minimal Projects Grid -->
    <div class="projects-grid" id="projects-grid">
      {realizacjeData.map((projekt, index) => (
        <article 
          class={`project-card ${index < PROJECTS_PER_PAGE ? 'visible' : 'hidden'}`}
          data-category={projekt.category}
          data-slug={projekt.slug}
          data-index={index}
          style={`transition-delay: ${(index % PROJECTS_PER_PAGE) * 0.1}s`}
        >
          <div class="project-image">
            <img 
              src={projekt.featured_image && projekt.featured_image.trim() ? projekt.featured_image : '/images/placeholder-project.jpg'} 
              alt={projekt.title}
              loading="lazy"
            />
          </div>
          <div class="project-info">
            <h3 class="project-title">{projekt.title}</h3>
            <p class="project-client">{projekt.client}</p>
            <span class="project-category">{projekt.category}</span>
          </div>
        </article>
      ))}
    </div>

    <!-- Load More Button -->
    {hasMoreProjects && (
      <div class="load-more-container">
        <button class="load-more-btn" id="load-more-btn">
          Pokaż więcej projektów
        </button>
      </div>
    )}
  </div>
</section>

<!-- Minimalist styles -->
<style>
  /* Minimal section - spójny z innymi sekcjami */
  .realizacje-section {
    background-color: var(--bg-main);
    min-height: 100vh;
    position: relative;
  }

  /* Simple header */
  .section-header { 
    text-align: center; 
    margin-bottom: 3rem;
    opacity: 0;
    transform: translateY(30px);
    animation: fadeInUp 0.8s ease-out forwards;
  }
  
  .section-title {
    font-family: var(--font-heading);
    font-weight: 700;
    font-size: 2.5rem;
    color: var(--text-main);
    margin: 0;
  }

  /* Minimal category filters */
  .category-filters {
    display: flex;
    justify-content: center;
    gap: 1rem;
    margin-bottom: 3rem;
    flex-wrap: wrap;
    opacity: 0;
    transform: translateY(20px);
    animation: fadeInUp 0.8s ease-out 0.2s forwards;
  }

  .filter-btn {
    padding: 12px 24px;
    background: var(--bg-secondary);
    border: 2px solid rgba(0, 169, 255, 0.2);
    color: var(--text-secondary);
    border-radius: 30px;
    cursor: pointer;
    transition: var(--transition);
    font-family: 'Montserrat', sans-serif;
    font-weight: 600;
    font-size: 0.9rem;
    letter-spacing: 0.5px;
  }
  
  .filter-btn:hover, .filter-btn.active {
    background: var(--accent-blue);
    border-color: var(--accent-blue);
    color: white;
    transform: translateY(-3px);
    box-shadow: 0 8px 25px rgba(0, 169, 255, 0.3);
  }

  /* Clean grid */
  .projects-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: 2rem;
    margin-bottom: 2rem;
    opacity: 0;
    animation: fadeInUp 0.8s ease-out 0.4s forwards;
  }

  /* Minimal project cards */
  .project-card {
    background: var(--bg-secondary);
    border-radius: 8px;
    overflow: hidden;
    cursor: pointer;
    transition: transform 0.3s ease, box-shadow 0.3s ease, opacity 0.4s ease;
    opacity: 0;
    transform: translateY(20px);
  }

  .project-card.visible {
    opacity: 1;
    transform: translateY(0);
  }

  .project-card.hidden {
    display: none;
  }

  .project-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 8px 25px rgba(0, 169, 255, 0.15);
  }

  .project-card.visible:hover {
    transform: translateY(-4px);
  }

  .project-image {
    aspect-ratio: 16/10;
    overflow: hidden;
  }

  .project-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
  }

  .project-card:hover .project-image img {
    transform: scale(1.05);
  }

  .project-info {
    padding: 1.5rem;
  }

  .project-title {
    font-family: var(--font-heading);
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--text-main);
    margin: 0 0 0.5rem 0;
    line-height: 1.3;
  }

  .project-client {
    color: var(--text-secondary);
    font-size: 0.95rem;
    margin: 0 0 1rem 0;
  }

  .project-category {
    display: inline-block;
    background: rgba(0, 169, 255, 0.1);
    color: var(--accent-blue);
    padding: 0.25rem 0.75rem;
    border-radius: 12px;
    font-size: 0.8rem;
    font-weight: 500;
  }

  /* Load More Button */
  .load-more-container {
    display: flex;
    justify-content: center;
    margin-top: 3rem;
  }

  .load-more-btn {
    background: var(--accent-blue);
    color: white;
    border: none;
    padding: 1rem 2rem;
    border-radius: 25px;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    font-family: var(--font-body);
    outline: none;
    -webkit-tap-highlight-color: transparent;
  }

  .load-more-btn:hover {
    background: color-mix(in srgb, var(--accent-blue) 85%, black);
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(0, 169, 255, 0.3);
  }

  .load-more-btn:focus {
    outline: 2px solid var(--accent-blue);
    outline-offset: 2px;
  }

  .load-more-btn:active {
    transform: translateY(0);
  }

  .load-more-btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .section-title {
      font-size: 2rem;
    }

    .projects-grid {
      grid-template-columns: 1fr;
      gap: 1.5rem;
    }

    .category-filters {
      overflow-x: auto;
      padding-bottom: 0.5rem;
    }

    .filter-btn {
      white-space: nowrap;
    }
  }

  @media (max-width: 480px) {
    .section-title {
      font-size: 1.8rem;
    }

    .projects-grid {
      gap: 1rem;
    }

    .project-info {
      padding: 1rem;
    }

    .project-title {
      font-size: 1.1rem;
    }

    .project-client {
      font-size: 0.9rem;
    }

    .category-filters {
      gap: 0.5rem;
      padding: 0 0.5rem 0.5rem 0.5rem;
    }

    .filter-btn {
      padding: 0.4rem 1rem;
      font-size: 0.85rem;
    }

    .load-more-btn {
      width: 100%;
      max-width: 280px;
      padding: 0.875rem 1.5rem;
    }
  }

  /* Animacje */
  @keyframes fadeInUp {
    from { 
      opacity: 0; 
      transform: translateY(30px); 
    }
    to { 
      opacity: 1; 
      transform: translateY(0); 
    }
  }
</style>

<!-- Simplified JavaScript -->
<script>
document.addEventListener('DOMContentLoaded', function() {
  const filterButtons = document.querySelectorAll('.filter-btn') as NodeListOf<HTMLButtonElement>;
  const loadMoreBtn = document.getElementById('load-more-btn') as HTMLButtonElement;
  const allCards = document.querySelectorAll('.project-card') as NodeListOf<HTMLElement>;
  
  const PROJECTS_PER_PAGE = 3;
  let currentPage = 1;
  let currentCategory = 'wszystkie';

  // Initialize - show first 3 cards
  showCards();

  // Set initial button visibility
  if (loadMoreBtn) {
    const allVisible = allCards.length;
    const shown = Math.min(PROJECTS_PER_PAGE, allVisible);
    if (shown >= allVisible) {
      loadMoreBtn.style.display = 'none';
    }
  }

  // Category filtering
  filterButtons.forEach(button => {
    button.addEventListener('click', function() {
      const category = this.dataset.category || 'wszystkie';
      currentCategory = category;
      currentPage = 1;
      
      // Update active button
      filterButtons.forEach(btn => btn.classList.remove('active'));
      this.classList.add('active');
      
      // Show filtered cards
      showCards();
    });
  });

  // Load more functionality
  if (loadMoreBtn) {
    loadMoreBtn.addEventListener('click', function() {
      currentPage++;
      showCards();
    });
  }

  function showCards() {
    // Get filtered cards
    const filteredCards = Array.from(allCards).filter(card => {
      return currentCategory === 'wszystkie' || card.dataset.category === currentCategory;
    });

    const totalFiltered = filteredCards.length;
    const cardsToShow = currentPage * PROJECTS_PER_PAGE;

    // Hide all cards first
    allCards.forEach(card => {
      card.classList.remove('visible');
      card.classList.add('hidden');
    });

    // Show filtered cards with animation
    filteredCards.slice(0, cardsToShow).forEach((card, index) => {
      card.classList.remove('hidden');
      
      // Staggered animation
      setTimeout(() => {
        card.classList.add('visible');
      }, (index % PROJECTS_PER_PAGE) * 100);
    });

    // Update load more button
    updateLoadMoreButton(totalFiltered, Math.min(cardsToShow, totalFiltered));
  }

  function updateLoadMoreButton(totalFiltered: number, currentlyShown: number) {
    if (!loadMoreBtn) return;
    
    if (currentlyShown >= totalFiltered) {
      loadMoreBtn.style.display = 'none';
    } else {
      loadMoreBtn.style.display = 'block';
      // Keep original text without counter to prevent layout jumps
    }
  }

  // Add click listeners to all cards
  allCards.forEach(card => {
    card.addEventListener('click', function() {
      const slug = this.dataset.slug;
      if (slug) {
        const lightboxEvent = new CustomEvent('openLightbox', { 
          detail: { slug } 
        });
        document.dispatchEvent(lightboxEvent);
      }
    });
  });
});
</script>

<!-- Project Lightbox -->
<ProjectLightbox />

<!-- Initialize lightbox with project data -->
<script is:inline define:vars={{ realizacjeData }}>
  // Initialize lightbox when DOM is ready
  document.addEventListener('DOMContentLoaded', function() {
    // Add a small delay to ensure all scripts are loaded
    setTimeout(function() {
      if (window.initProjectLightbox) {
        window.initProjectLightbox(realizacjeData);
      }
    }, 100);
  });
</script>
