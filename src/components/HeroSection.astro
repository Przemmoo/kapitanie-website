---
// Hero Section z dynamicznym wideo tłem
export interface Props {
  data?: {
    title?: string;
    subtitle?: string;
    cta1_text?: string;
    cta1_link?: string;
    cta2_text?: string;
    cta2_link?: string;
    video_mp4?: string;
    video_webm?: string;
    poster_image?: string;
  };
}

const { data } = Astro.props;

// Fallback values jeśli brak danych z CMS
const heroData = {
  title: data?.title || "Twoje wydarzenie w najlepszym świetle",
  subtitle: data?.subtitle || "Jesteśmy kapitanami technicznej strony Twojego sukcesu. Zapewniamy kompleksową obsługę multimedialną eventów, koncertów i konferencji.",
  cta1_text: data?.cta1_text || "Zobacz nasze realizacje",
  cta1_link: data?.cta1_link || "#realizacje",
  cta2_text: data?.cta2_text || "Skontaktuj się z nami",
  cta2_link: data?.cta2_link || "#kontakt",
  video_mp4: data?.video_mp4 || "",
  video_webm: data?.video_webm || "",
  poster_image: data?.poster_image || ""
};
---

<section id="hero" class="hero">
  <!-- Video background -->
  <div class="video-container">
    <video 
      autoplay 
      muted 
      loop 
      playsinline 
      class="hero-video"
      poster={heroData.poster_image}
      aria-hidden="true"
    >
      <source src={heroData.video_mp4} type="video/mp4">
      <source src={heroData.video_webm} type="video/webm">
    </video>
    <div class="video-overlay"></div>
  </div>

  <!-- Hero content -->
  <div class="container">
    <div class="hero-content">
      <h1 class="hero-title fade-in-up">
        {heroData.title}
      </h1>
      
      <p class="hero-subtitle fade-in-up" set:html={heroData.subtitle.replace(/\n/g, '<br />')}>
      </p>
      
      <div class="hero-buttons fade-in-up">
        <a href={heroData.cta1_link} class="btn btn-primary">
          {heroData.cta1_text}
        </a>
        <a href={heroData.cta2_link} class="btn btn-secondary">
          {heroData.cta2_text}
        </a>
      </div>
      
      <!-- Scroll indicator -->
      <div class="scroll-indicator fade-in-up">
        <span class="scroll-text">Przewiń w dół</span>
        <div class="scroll-arrow">
          <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="m7 13 5 5 5-5"></path>
            <path d="m7 6 5 5 5-5"></path>
          </svg>
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  .hero {
    position: relative;
    height: 100vh;
    min-height: 600px;
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
    color: var(--text-main);
  }

  .hero-content {
    overflow: hidden;
  }

  /* Video Background */
  .video-container {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -2;
  }

  .hero-video {
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center;
  }

  .video-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      135deg,
      rgba(18, 18, 18, 0.8) 0%,
      rgba(31, 31, 31, 0.6) 50%,
      rgba(18, 18, 18, 0.9) 100%
    );
    z-index: -1;
  }

  /* Fallback background for when video fails */
  .hero::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      135deg,
      var(--bg-main) 0%,
      var(--bg-secondary) 50%,
      var(--bg-main) 100%
    );
    z-index: -3;
  }

  /* Hero Content */
  .hero-content {
    text-align: center;
    max-width: 800px;
    margin: 0 auto;
    padding: 0 20px;
    position: relative;
    z-index: 1;
  }

  .hero-title {
    margin-bottom: 2rem;
    background: linear-gradient(
      135deg,
      var(--text-main) 0%,
      var(--accent-blue) 100%
    );
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    animation-delay: 0.2s;
  }

  .hero-subtitle {
    font-size: clamp(1.1rem, 2.5vw, 1.4rem);
    margin-bottom: 3rem;
    color: var(--text-secondary);
    line-height: 1.6;
    animation-delay: 0.4s;
  }

  .hero-buttons {
    display: flex;
    gap: 1.5rem;
    justify-content: center;
    flex-wrap: wrap;
    margin-bottom: 2rem;
    animation-delay: 0.6s;
  }

  .hero-buttons .btn {
    padding: 15px 35px;
    font-size: 1.1rem;
    min-width: 200px;
  }

  /* Scroll Indicator */
  .scroll-indicator {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.5rem;
    color: var(--text-secondary);
    cursor: pointer;
    transition: var(--transition-fast);
    margin-top: 2rem;
    animation-delay: 0.8s;
  }

  .scroll-indicator:hover {
    color: var(--accent-blue);
  }

  .scroll-text {
    font-size: 0.9rem;
    font-weight: 500;
  }

  .scroll-arrow {
    width: 24px;
    height: 24px;
    animation: bounce 2s infinite;
    overflow: hidden;
  }

  /* Parallax effect */
  .hero-video {
    transform: scale(1.1);
    transition: transform 0.3s ease-out;
  }

  /* Responsive */
  @media (max-width: 1024px) {
    .hero-video {
      transform: scale(1.05);
    }
    .hero-title {
      font-size: 3rem;
    }
    
    .hero-subtitle {
      font-size: 1.3rem;
    }
  }

  @media (max-width: 768px) {
    .hero {
      min-height: 500px;
      padding-top: 70px;
    }

    .hero-video {
      transform: none;
    }

    .hero-content {
      padding: 0 20px;
    }

    .hero-title {
      font-size: 2.5rem;
      line-height: 1.2;
    }

    .hero-subtitle {
      font-size: 1.1rem;
      margin-bottom: 2rem;
    }

    .hero-buttons {
      flex-direction: column;
      align-items: center;
      gap: 1rem;
      width: 100%;
    }

    .hero-buttons .btn {
      width: 100%;
      max-width: 280px;
      min-width: auto;
      text-align: center;
    }
  }

  @media (max-width: 480px) {
    .hero-content {
      padding: 0 16px;
    }

    .hero-title {
      font-size: 2rem;
    }

    .hero-subtitle {
      font-size: 1rem;
    }

    .hero-buttons .btn {
      width: 100%;
      max-width: 100%;
      min-width: auto;
      padding: 12px 24px;
      font-size: 1rem;
    }
  }

  /* High contrast mode */
  @media (prefers-contrast: high) {
    .video-overlay {
      background: rgba(0, 0, 0, 0.9);
    }
    
    .hero-title {
      background: none;
      -webkit-text-fill-color: var(--text-main);
      color: var(--text-main);
    }
  }

  /* Reduced motion */
  @media (prefers-reduced-motion: reduce) {
    .hero-video {
      transform: none;
    }
    
    .scroll-arrow {
      animation: none;
    }
    
    .fade-in-up {
      animation: none;
    }
  }

  /* Performance optimizations */
  .hero-video {
    will-change: transform;
  }

  .fade-in-up {
    will-change: transform, opacity;
  }
</style>

<script>
  // Hero section enhancements
  document.addEventListener('DOMContentLoaded', () => {
    const hero = document.querySelector('.hero');
    const heroVideo = document.querySelector('.hero-video') as HTMLVideoElement;
    const scrollIndicator = document.querySelector('.scroll-indicator');

    // Parallax effect for video
    const handleScroll = () => {
      if (!heroVideo) return;
      
      const scrolled = window.pageYOffset;
      const rate = scrolled * -0.3;
      
      // Apply parallax only on desktop
      if (window.innerWidth > 768) {
        heroVideo.style.transform = `scale(1.1) translate3d(0, ${rate}px, 0)`;
      } else {
        heroVideo.style.transform = `translate3d(0, ${rate}px, 0)`;
      }
    };

    // Scroll indicator click
    scrollIndicator?.addEventListener('click', () => {
      const nextSection = document.querySelector('#o-nas') || document.querySelector('section:nth-of-type(2)');
      nextSection?.scrollIntoView({ behavior: 'smooth' });
    });

    // Video error handling
    if (heroVideo) {
      heroVideo.addEventListener('error', () => {
        console.log('Video failed to load, using fallback background');
        heroVideo.style.display = 'none';
      });

      // Preload video
      heroVideo.addEventListener('canplay', () => {
        heroVideo.style.opacity = '1';
      });
    }

    // Add parallax only on desktop
    if (window.innerWidth > 768) {
      window.addEventListener('scroll', handleScroll, { passive: true });
    }

    // Animation triggers
    const observerOptions = {
      threshold: 0.1,
      rootMargin: '0px 0px -100px 0px'
    };

    const animationObserver = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('fade-in-up');
        }
      });
    }, observerOptions);

    // Observe hero elements
    document.querySelectorAll('.hero-content > *').forEach(el => {
      animationObserver.observe(el);
    });
  });
</script>
