---
// Sekcja Kontakt z formularzem i informacjami
import LucideIcon from './LucideIcon.astro';

export interface Props {
  data?: {
    title?: string;
    subtitle?: string;
    contact_methods?: Array<{
      icon: string;
      title: string;
      value: string;
      link?: string;
    }>;
  };
}

const { data } = Astro.props;

// Fallback values jeśli brak danych z CMS
const fallbackContactMethods = [
  {
    icon: "phone",
    title: "Telefon",
    value: "+48 501 181 703",
    link: "tel:+48501181703"
  },
  {
    icon: "mail",
    title: "Email",
    value: "kontakt@kapitanie.pl",
    link: "mailto:kontakt@kapitanie.pl"
  },
  {
    icon: "map-pin",
    title: "Adres",
    value: "ul. Różana 54B/1, 32-020 Wieliczka",
    link: "https://maps.google.com/maps?q=ul.+Różana+54B/1,+32-020+Wieliczka"
  },
  {
    icon: "clock",
    title: "Godziny pracy",
    value: "Poniedziałek - Piątek: 9:00 - 18:00"
  },
  {
    icon: "timer",
    title: "Czas odpowiedzi",
    value: "Średni czas odpowiedzi: 2 godziny"
  }
];

const contactData = {
  title: data?.title || "Porozmawiajmy o Twoim wydarzeniu",
  subtitle: data?.subtitle || "Masz pomysł, planujesz event lub potrzebujesz wyceny?\nWypełnij formularz lub zadzwoń. Odpowiadamy w ciągu 24 godzin.",
  // Użyj danych z CMS jeśli istnieją, w przeciwnym razie fallback
  contact_methods: data && data.contact_methods !== undefined ? data.contact_methods : fallbackContactMethods
};
---

<section id="kontakt" class="section kontakt-section">
  <div class="container">
    <!-- Section Header -->
    <div class="section-header">
      <h2 class="section-title">{contactData.title}</h2>
      <p class="section-subtitle" set:html={contactData.subtitle.replace(/\n/g, '<br />')}>
      </p>
    </div>

    <div class="kontakt-grid">
      <!-- Lewa strona - Formularz kontaktowy -->
      <div class="contact-form-container">
        <form class="contact-form" id="contact-form" novalidate>
          <div class="form-row">
            <div class="form-group">
              <label for="firstName">Imię *</label>
              <input 
                type="text" 
                id="firstName" 
                name="firstName" 
                required 
                autocomplete="given-name"
                aria-describedby="firstName-error"
              />
              <span class="error-message" id="firstName-error"></span>
            </div>
            
            <div class="form-group">
              <label for="lastName">Nazwisko *</label>
              <input 
                type="text" 
                id="lastName" 
                name="lastName" 
                required 
                autocomplete="family-name"
                aria-describedby="lastName-error"
              />
              <span class="error-message" id="lastName-error"></span>
            </div>
          </div>

          <div class="form-group">
            <label for="email">Email *</label>
            <input 
              type="email" 
              id="email" 
              name="email" 
              required 
              autocomplete="email"
              aria-describedby="email-error"
            />
            <span class="error-message" id="email-error"></span>
          </div>

          <div class="form-row">
            <div class="form-group">
              <label for="phone">Telefon</label>
              <input 
                type="tel" 
                id="phone" 
                name="phone" 
                autocomplete="tel"
                aria-describedby="phone-error"
              />
              <span class="error-message" id="phone-error"></span>
            </div>
            
            <div class="form-group">
              <label for="company">Firma</label>
              <input 
                type="text" 
                id="company" 
                name="company" 
                autocomplete="organization"
                aria-describedby="company-error"
              />
              <span class="error-message" id="company-error"></span>
            </div>
          </div>

          <div class="form-group">
            <label for="eventType">Rodzaj wydarzenia *</label>
            <select 
              id="eventType" 
              name="eventType" 
              required
              aria-describedby="eventType-error"
            >
              <option value="">Wybierz rodzaj wydarzenia</option>
              <option value="konferencja">Konferencja</option>
              <option value="gala">Gala firmowa</option>
              <option value="event-korporacyjny">Event korporacyjny</option>
              <option value="targi">Targi / Wystawa</option>
              <option value="inne">Inne</option>
            </select>
            <span class="error-message" id="eventType-error"></span>
          </div>

          <div class="form-row">
            <div class="form-group">
              <label for="eventDate">Planowana data</label>
              <input 
                type="date" 
                id="eventDate" 
                name="eventDate"
                aria-describedby="eventDate-error"
                min=""
              />
              <span class="error-message" id="eventDate-error"></span>
            </div>
            
            <div class="form-group">
              <label for="guestCount">Liczba gości</label>
              <select 
                id="guestCount" 
                name="guestCount"
                aria-describedby="guestCount-error"
              >
                <option value="">Wybierz liczbę gości</option>
                <option value="do-50">Do 50 osób</option>
                <option value="50-100">50-100 osób</option>
                <option value="100-300">100-300 osób</option>
                <option value="300-500">300-500 osób</option>
                <option value="500-1000">500-1000 osób</option>
                <option value="ponad-1000">Ponad 1000 osób</option>
              </select>
              <span class="error-message" id="guestCount-error"></span>
            </div>
          </div>

          <div class="form-group">
            <label for="services">Potrzebne usługi</label>
            <div class="checkbox-grid">
              <label class="checkbox-label">
                <input type="checkbox" name="services" value="kompleksowa" />
                <svg class="checkbox-icon" viewBox="0 0 20 20" fill="none">
                  <rect x="2" y="2" width="16" height="16" rx="2" stroke="currentColor" stroke-width="2.5"/>
                  <path class="check" d="M6 10l3 3 5-6" stroke="white" stroke-width="2" fill="none" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
                <span class="checkbox-text">Obsługa kompleksowa</span>
              </label>
              <label class="checkbox-label">
                <input type="checkbox" name="services" value="oswietlenie" />
                <svg class="checkbox-icon" viewBox="0 0 20 20" fill="none">
                  <rect x="2" y="2" width="16" height="16" rx="2" stroke="currentColor" stroke-width="2.5"/>
                  <path class="check" d="M6 10l3 3 5-6" stroke="white" stroke-width="2" fill="none" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
                <span class="checkbox-text">Oświetlenie sceniczne</span>
              </label>
              <label class="checkbox-label">
                <input type="checkbox" name="services" value="naglosnienie" />
                <svg class="checkbox-icon" viewBox="0 0 20 20" fill="none">
                  <rect x="2" y="2" width="16" height="16" rx="2" stroke="currentColor" stroke-width="2.5"/>
                  <path class="check" d="M6 10l3 3 5-6" stroke="white" stroke-width="2" fill="none" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
                <span class="checkbox-text">Nagłośnienie</span>
              </label>
              <label class="checkbox-label">
                <input type="checkbox" name="services" value="multimedia" />
                <svg class="checkbox-icon" viewBox="0 0 20 20" fill="none">
                  <rect x="2" y="2" width="16" height="16" rx="2" stroke="currentColor" stroke-width="2.5"/>
                  <path class="check" d="M6 10l3 3 5-6" stroke="white" stroke-width="2" fill="none" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
                <span class="checkbox-text">Multimedia / Ekrany LED</span>
              </label>
              <label class="checkbox-label">
                <input type="checkbox" name="services" value="streaming" />
                <svg class="checkbox-icon" viewBox="0 0 20 20" fill="none">
                  <rect x="2" y="2" width="16" height="16" rx="2" stroke="currentColor" stroke-width="2.5"/>
                  <path class="check" d="M6 10l3 3 5-6" stroke="white" stroke-width="2" fill="none" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
                <span class="checkbox-text">Transmisja online</span>
              </label>
              <label class="checkbox-label">
                <input type="checkbox" name="services" value="aplikacja" />
                <svg class="checkbox-icon" viewBox="0 0 20 20" fill="none">
                  <rect x="2" y="2" width="16" height="16" rx="2" stroke="currentColor" stroke-width="2.5"/>
                  <path class="check" d="M6 10l3 3 5-6" stroke="white" stroke-width="2" fill="none" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
                <span class="checkbox-text">Aplikacja eventowa</span>
              </label>
            </div>
          </div>
<br>
          <div class="form-group">
            <label for="message">Opisz swoje wydarzenie *</label>
            <textarea 
              id="message" 
              name="message" 
              rows="5" 
              required
              placeholder="Opowiedz nam o swoim wydarzeniu, wizji i oczekiwaniach. Im więcej szczegółów, tym lepszą wycenę będziemy mogli przygotować."
              aria-describedby="message-error"
            ></textarea>
            <span class="error-message" id="message-error"></span>
          </div>

          <div class="form-group checkbox-group">
            <label class="checkbox-label">
              <input type="checkbox" name="privacy" required aria-describedby="privacy-error" />
              <svg class="checkbox-icon" viewBox="0 0 20 20" fill="none">
                <rect x="2" y="2" width="16" height="16" rx="2" stroke="currentColor" stroke-width="2.5"/>
                <path class="check" d="M6 10l3 3 5-6" stroke="white" stroke-width="2" fill="none" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
              <span class="checkbox-text">Akceptuję <a href="/polityka-prywatnosci" target="_blank">politykę prywatności</a> *</span>
            </label>
            <span class="error-message" id="privacy-error"></span>
          </div>

          <button type="submit" class="btn btn-primary submit-btn">
            <span class="btn-text">Wyślij zapytanie</span>
            <span class="btn-loading">
              <svg class="spinner" viewBox="0 0 24 24">
                <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2" fill="none" stroke-linecap="round" stroke-dasharray="31.416" stroke-dashoffset="31.416">
                  <animate attributeName="stroke-dasharray" dur="2s" values="0 31.416;15.708 15.708;0 31.416" repeatCount="indefinite"/>
                  <animate attributeName="stroke-dashoffset" dur="2s" values="0;-15.708;-31.416" repeatCount="indefinite"/>
                </circle>
              </svg>
              Wysyłanie...
            </span>
          </button>

          <div class="form-response" id="form-response"></div>
        </form>
      </div>

      <!-- Prawa strona - Informacje kontaktowe -->
      <div class="contact-info">
        <div class="info-card">
          <h3>Skontaktuj się bezpośrednio</h3>
          
          <div class="contact-methods">
            {contactData.contact_methods && contactData.contact_methods.length > 0 ? (
              contactData.contact_methods.map((method) => (
                <div class="contact-method">
                  <div class="contact-icon">
                    <LucideIcon name={method.icon} size={24} strokeWidth={2} />
                  </div>
                  <div class="contact-details">
                    <span class="contact-label">{method.title}</span>
                    {method.link ? (
                      <a href={method.link} class="contact-value">{method.value}</a>
                    ) : (
                      <span class="contact-value">{method.value}</span>
                    )}
                  </div>
                </div>
              ))
            ) : (
              <div class="no-contact-methods">
                <p style="color: var(--text-secondary); text-align: center; padding: 2rem;">
                  Brak skonfigurowanych metod kontaktu. Skonfiguruj je w panelu administratora.
                </p>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  .kontakt-section {
    background: linear-gradient(135deg, var(--bg-main) 0%, var(--bg-secondary) 100%);
    position: relative;
  }

  .section-header {
    text-align: center;
    margin-bottom: 4rem;
  }

  .section-title {
    color: var(--text-main);
    margin-bottom: 1rem;
  }

  .section-subtitle {
    font-size: 1.2rem;
    color: var(--text-secondary);
    max-width: 700px;
    margin: 0 auto;
    line-height: 1.6;
  }

  .kontakt-grid {
    display: grid;
    grid-template-columns: 1.85fr 1fr;
    gap: 2rem;
    align-items: start;
  }

  /* Contact Form */
  .contact-form-container {
    background: var(--bg-secondary);
    border-radius: 20px;
    padding: 3rem;
    border: 1px solid rgba(0, 169, 255, 0.1);
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
  }

  .contact-form {
    width: 100%;
  }

  .form-row {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1rem;
  }

  .form-group {
    margin-bottom: 0.25rem;
  }

  .form-group label {
    display: block;
    margin-bottom: 0.25rem;
    color: var(--text-main);
    font-weight: 600;
    font-size: 0.9rem;
  }

  .form-group input,
  .form-group select,
  .form-group textarea {
    width: 100%;
    padding: 10px 16px;
    background: var(--bg-main);
    border: 2px solid rgba(255, 255, 255, 0.1);
    border-radius: 8px;
    color: var(--text-main);
    font-size: 1rem;
    transition: var(--transition-fast);
    font-family: var(--font-body);
  }

  .form-group input:focus,
  .form-group select:focus,
  .form-group textarea:focus {
    outline: none;
    border-color: var(--accent-blue);
    box-shadow: 0 0 0 3px rgba(0, 169, 255, 0.1);
  }

  .form-group input::placeholder,
  .form-group textarea::placeholder {
    color: var(--text-secondary);
  }

  /* Checkbox styles */
  .checkbox-group {
    display: flex;
    flex-direction: column;
    gap: 0.4rem;
  }

  .checkbox-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 0.4rem 1rem;
  }

  .checkbox-label {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    cursor: pointer;
    font-size: 0.9rem;
    color: var(--text-main);
    transition: var(--transition-fast);
  }

  .checkbox-label:hover {
    color: var(--accent-blue);
  }

  .checkbox-label input[type="checkbox"] {
    display: none;
  }

  .checkbox-icon {
    width: 18px;
    height: 18px;
    color: rgba(255, 255, 255, 0.2);
    transition: var(--transition-fast);
    flex-shrink: 0;
    vertical-align: top;
  }

  .checkbox-label span {
    line-height: 18px;
    display: inline-block;
  }

  .checkbox-text {
    font-size: 0.9rem;
    line-height: 18px;
    display: block;
    margin: 0;
    padding: 0;
    vertical-align: middle;
    position: relative;
    top: -3.5px;
    left: 5px;
  }

  .checkbox-label input[type="checkbox"]:checked + .checkbox-icon {
    color: var(--accent-blue);
  }

  .checkbox-label input[type="checkbox"]:checked + .checkbox-icon rect {
    fill: var(--accent-blue);
    stroke: var(--accent-blue);
  }

  .checkbox-label input[type="checkbox"] + .checkbox-icon .check {
    opacity: 0;
    transition: opacity var(--transition-fast);
  }

  .checkbox-label input[type="checkbox"]:checked + .checkbox-icon .check {
    opacity: 1;
  }

  /* Submit button */
  .submit-btn {
    width: 100%;
    padding: 15px 30px;
    font-size: 1.1rem;
    position: relative;
    overflow: hidden;
  }

  .btn-loading {
    display: none;
    align-items: center;
    gap: 0.5rem;
  }

  .submit-btn.loading .btn-text {
    display: none;
  }

  .submit-btn.loading .btn-loading {
    display: flex;
  }

  .submit-btn:disabled {
    opacity: 0.7;
    cursor: not-allowed;
  }

  .spinner {
    width: 20px;
    height: 20px;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }

  /* Error messages */
  .error-message {
    display: block;
    color: var(--error-color);
    font-size: 0.8rem;
    margin-top: 0.3rem;
    min-height: 1rem;
  }

  .form-group.error input,
  .form-group.error select,
  .form-group.error textarea {
    border-color: var(--error-color);
  }

  /* Form response */
  .form-response {
    margin-top: 1rem;
    padding: 1rem;
    border-radius: 8px;
    text-align: center;
    display: none;
  }

  .form-response.success {
    background: rgba(40, 167, 69, 0.1);
    border: 1px solid rgba(40, 167, 69, 0.3);
    color: #28a745;
  }

  .form-response.error {
    background: rgba(255, 68, 68, 0.1);
    border: 1px solid rgba(255, 68, 68, 0.3);
    color: var(--error-color);
  }

  /* Contact Info */
  .contact-info {
    display: flex;
    flex-direction: column;
    gap: 2rem;
  }

  .info-card {
    background: rgba(31, 31, 31, 0.5);
    border-radius: 16px;
    padding: 2rem;
    border: 1px solid rgba(0, 169, 255, 0.1);
    transition: var(--transition-fast);
  }

  .info-card:hover {
    background: rgba(31, 31, 31, 0.8);
    border-color: rgba(0, 169, 255, 0.3);
  }

  .info-card h3 {
    color: var(--text-main);
    margin-bottom: 1.5rem;
    font-size: 1.3rem;
  }

  .contact-methods {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .contact-method {
    display: flex;
    align-items: flex-start;
    gap: 1rem;
  }

  .contact-icon {
    width: 40px;
    height: 40px;
    background: linear-gradient(135deg, var(--accent-blue), #0088CC);
    border-radius: 10px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    flex-shrink: 0;
  }

  .contact-icon svg {
    width: 20px;
    height: 20px;
  }

  .contact-details {
    flex: 1;
  }

  .contact-label {
    display: block;
    color: var(--text-secondary);
    font-size: 0.9rem;
    margin-bottom: 0.3rem;
  }

  .contact-value {
    color: var(--text-main);
    font-weight: 600;
    text-decoration: none;
    transition: var(--transition-fast);
  }

  .contact-value:hover {
    color: var(--accent-blue);
  }

  /* Response time stats */
  .response-time {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .response-stat {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 1rem;
    background: rgba(0, 169, 255, 0.05);
    border-radius: 8px;
  }

  .stat-icon {
    font-size: 1.5rem;
  }

  .stat-number {
    font-size: 1.2rem;
    font-weight: 700;
    color: var(--accent-blue);
  }

  .stat-label {
    font-size: 0.8rem;
    color: var(--text-secondary);
  }

  /* Direct contact buttons */
  .direct-contact-buttons {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    margin-top: 1.5rem;
  }

  .direct-contact-buttons .btn {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    padding: 12px 24px;
  }

  .direct-contact-buttons .btn svg {
    width: 18px;
    height: 18px;
  }

  /* Responsive */
  @media (max-width: 1024px) {
    .kontakt-grid {
      gap: 3rem;
    }

    .contact-form-container {
      padding: 2rem;
    }
  }

  @media (max-width: 768px) {
    .kontakt-grid {
      grid-template-columns: 1fr;
      gap: 2rem;
    }

    .form-row {
      grid-template-columns: 1fr;
      gap: 0;
    }

    .checkbox-grid {
      grid-template-columns: 1fr;
    }

    .contact-form-container {
      padding: 1.5rem;
    }

    .info-card {
      padding: 1.5rem;
    }

    .direct-contact-buttons {
      flex-direction: column;
      gap: 1rem;
    }

    .contact-btn {
      width: 100%;
      text-align: center;
    }

    .submit-btn {
      width: 100%;
      font-size: 1rem;
    }
  }

  @media (max-width: 480px) {
    .contact-form-container {
      padding: 1rem;
    }

    .info-card {
      padding: 1rem;
    }

    .section-title {
      font-size: 2rem;
      line-height: 1.2;
    }

    .direct-contact-buttons {
      flex-direction: column;
    }

    .contact-method {
      flex-direction: column;
      text-align: center;
      gap: 0.5rem;
    }

    .contact-icon {
      width: 36px;
      height: 36px;
      margin: 0 auto;
    }

    .contact-value {
      font-size: 0.9rem;
    }

    .form-group input,
    .form-group select,
    .form-group textarea {
      font-size: 16px; /* Zapobiega zoom na iOS */
      padding: 12px 16px;
    }

    .submit-btn {
      padding: 12px 24px;
      font-size: 1rem;
    }
  }

  /* Date input styling */
  input[type="date"] {
    position: relative;
  }

  input[type="date"]::-webkit-calendar-picker-indicator {
    background: transparent;
    color: var(--accent-blue);
  }

  /* Select styling */
  select {
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='M6 8l4 4 4-4'/%3e%3c/svg%3e");
    background-position: right 12px center;
    background-repeat: no-repeat;
    background-size: 16px;
    appearance: none;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('contact-form') as HTMLFormElement;
    const submitBtn = form?.querySelector('.submit-btn') as HTMLButtonElement;
    const formResponse = document.getElementById('form-response') as HTMLDivElement;

    if (!form || !submitBtn || !formResponse) {
      console.error('Required form elements not found');
      return;
    }

    // Set minimum date to today
    const eventDateInput = document.getElementById('eventDate') as HTMLInputElement;
    if (eventDateInput) {
      const today = new Date().toISOString().split('T')[0];
      eventDateInput.setAttribute('min', today);
    }

    // Form validation
    const validateField = (field: HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement) => {
      const value = field.value.trim();
      const name = field.name;
      const errorElement = document.getElementById(`${name}-error`) as HTMLSpanElement;
      const formGroup = field.closest('.form-group');
      
      let isValid = true;
      let errorMessage = '';

      // Required field validation
      if (field.required && !value) {
        isValid = false;
        errorMessage = 'To pole jest wymagane';
      }

      // Email validation
      if (name === 'email' && value) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(value)) {
          isValid = false;
          errorMessage = 'Wprowadź poprawny adres email';
        }
      }

      // Phone validation
      if (name === 'phone' && value) {
        const phoneRegex = /^[\+]?[0-9\s\-\(\)]{9,}$/;
        if (!phoneRegex.test(value)) {
          isValid = false;
          errorMessage = 'Wprowadź poprawny numer telefonu';
        }
      }

      // Privacy checkbox validation
      if (name === 'privacy' && field.required && !(field as HTMLInputElement).checked) {
        isValid = false;
        errorMessage = 'Akceptacja polityki prywatności jest wymagana';
      }

      // Update UI
      if (errorElement) {
        errorElement.textContent = errorMessage;
      }
      
      if (formGroup) {
        formGroup.classList.toggle('error', !isValid);
      }

      return isValid;
    };

    // Real-time validation
    const formFields = form.querySelectorAll('input, select, textarea') as NodeListOf<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>;
    formFields.forEach(field => {
      field.addEventListener('blur', () => validateField(field));
      field.addEventListener('input', () => {
        if (field.closest('.form-group')?.classList.contains('error')) {
          validateField(field);
        }
      });
    });

    // Form submission
    form.addEventListener('submit', async (e: Event) => {
      e.preventDefault();

      // Validate all fields
      let isFormValid = true;
      formFields.forEach(field => {
        if (!validateField(field)) {
          isFormValid = false;
        }
      });

      if (!isFormValid) {
        formResponse.textContent = 'Proszę poprawić błędy w formularzu';
        formResponse.className = 'form-response error';
        formResponse.style.display = 'block';
        return;
      }

      // Show loading state
      submitBtn.classList.add('loading');
      submitBtn.disabled = true;
      formResponse.style.display = 'none';

      try {
        // Prepare form data
        const formData = new FormData(form);
        const data: { [key: string]: any } = {};
        
        // Handle regular fields
        for (let [key, value] of formData.entries()) {
          if (key === 'services') {
            if (!data.services) data.services = [];
            data.services.push(value);
          } else {
            data[key] = value;
          }
        }

        // Simulate API call (replace with actual endpoint)
        await new Promise(resolve => setTimeout(resolve, 2000));

        // Success response
        formResponse.innerHTML = `
          <strong>Dziękujemy za wysłanie zapytania!</strong><br>
          Odpowiemy w ciągu 24 godzin. Sprawdź swoją skrzynkę email.
        `;
        formResponse.className = 'form-response success';
        formResponse.style.display = 'block';

        // Reset form
        form.reset();
        
        // Remove error classes
        document.querySelectorAll('.form-group.error').forEach(group => {
          group.classList.remove('error');
        });

        // Track conversion (analytics)
        if (typeof (window as any).gtag !== 'undefined') {
          (window as any).gtag('event', 'form_submit', {
            event_category: 'Contact',
            event_label: 'Contact Form'
          });
        }

      } catch (error) {
        console.error('Form submission error:', error);
        formResponse.innerHTML = `
          <strong>Wystąpił błąd podczas wysyłania.</strong><br>
          Spróbuj ponownie lub skontaktuj się telefonicznie.
        `;
        formResponse.className = 'form-response error';
        formResponse.style.display = 'block';
      } finally {
        // Hide loading state
        submitBtn.classList.remove('loading');
        submitBtn.disabled = false;
      }
    });

    // Intersection Observer for animations
    const observerOptions: IntersectionObserverInit = {
      threshold: 0.2,
      rootMargin: '0px 0px -50px 0px'
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('fade-in-up');
        }
      });
    }, observerOptions);

    // Observe elements
    document.querySelectorAll('.section-header, .contact-form-container, .info-card').forEach(el => {
      observer.observe(el);
    });

    // Auto-resize textarea
    const messageTextarea = document.getElementById('message') as HTMLTextAreaElement;
    if (messageTextarea) {
      messageTextarea.addEventListener('input', function(this: HTMLTextAreaElement) {
        this.style.height = 'auto';
        this.style.height = (this.scrollHeight) + 'px';
      });
    }

    // Phone number formatting
    const phoneInput = document.getElementById('phone') as HTMLInputElement;
    if (phoneInput) {
      phoneInput.addEventListener('input', function(e: Event) {
        const target = e.target as HTMLInputElement;
        if (!target) return;
        
        let value = target.value.replace(/\D/g, '');
        if (value.startsWith('48')) {
          value = '+48 ' + value.substring(2);
        } else if (value.length > 0 && !value.startsWith('+')) {
          value = '+48 ' + value;
        }
        target.value = value;
      });
    }
  });
</script>
