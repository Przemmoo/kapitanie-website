---
// Sekcja O Nas z dwukolumnowym layoutem
import LucideIcon from './LucideIcon.astro';

export interface Props {
  data?: {
    title?: string;
    description?: string;
    team_image?: string;
    pillars?: Array<{
      icon: string;
      title: string;
      description: string;
    }>;
    stats?: Array<{
      number: string;
      label: string;
    }>;
  };
}

const { data } = Astro.props;

// Fallback values jeśli brak danych z CMS
const aboutData = {
  title: data?.title || "Kapitan na pokładzie Twojego eventu",
  description: data?.description || "Witaj na pokładzie! Nazywam się [Imię Założyciela] i jestem kapitanem, który od ponad 10 lat bezpiecznie prowadzi wydarzenia przez wszystkie, nawet najbardziej wzburzone, wody technicznych wyzwań.",
  team_image: data?.team_image || "/images/team-kapitanie.jpg",
  pillars: data?.pillars || [
    {
      icon: "lightbulb",
      title: "Oświetlenie",
      description: "Profesjonalne systemy oświetleniowe, które nadają Twojemu wydarzeniu właściwy nastrój i charakter."
    },
    {
      icon: "mic",
      title: "Nagłośnienie", 
      description: "Krystalicznie czyste brzmienie dzięki najnowocześniejszemu sprzętowi audio i profesjonalnej obsłudze."
    },
    {
      icon: "monitor",
      title: "Multimedia",
      description: "Zaawansowane systemy wizualne, ekrany LED i projekcje, które przeniosą Twoich gości w inny wymiar."
    }
  ],
  stats: data?.stats || [
    { number: "150", label: "Zrealizowanych eventów" },
    { number: "10", label: "Lat doświadczenia" },
    { number: "50", label: "Zadowolonych klientów" }
  ]
};
---

<section id="o-nas" class="section about-section">
  <div class="container">
    <div class="about-grid">
      <!-- Lewa strona - zdjęcie zespołu -->
      <div class="about-image">
        <div class="image-container">
          <img 
            src={aboutData.team_image} 
            alt="Zespół kapitanie w akcji - przy konsolecie na scenie"
            class="team-photo"
            loading="lazy"
            width="800"
            height="600"
          />
          <div class="image-overlay">
            <div class="play-button" aria-label="Odtwórz wideo o zespole">
              <svg viewBox="0 0 24 24" fill="currentColor">
                <path d="M8 5v14l11-7z"/>
              </svg>
            </div>
          </div>
        </div>
      </div>

      <!-- Prawa strona - treść -->
      <div class="about-content">
        <h2 class="section-title">
          {aboutData.title}
        </h2>
        
        <div class="about-text">
          <p class="lead" set:html={aboutData.description.replace(/\n/g, '<br />')}>
          </p>
        </div>

        <!-- Główne filary oferty -->
        <div class="services-pillars">
          {aboutData.pillars.map((pillar) => (
            <div class="pillar">
              <div class="pillar-icon">
                <LucideIcon name={pillar.icon} size={32} strokeWidth={2} />
              </div>
              <h3>{pillar.title}</h3>
              <p set:html={pillar.description.replace(/\n/g, '<br />')}></p>
            </div>
          ))}
        </div>

        <!-- Statystyki -->
        <div class="stats">
          {aboutData.stats.map((stat) => (
            <div class="stat">
              <span class="stat-number" data-count={stat.number}>0</span>
              <span class="stat-label">{stat.label}</span>
            </div>
          ))}
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  .about-section {
    background-color: var(--bg-main);
    position: relative;
  }

  .about-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 2rem;
    align-items: center;
    min-height: 500px;
  }

  /* Image Section */
  .about-image {
    position: relative;
  }

  .image-container {
    position: relative;
    border-radius: 20px;
    overflow: hidden;
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
    transition: var(--transition-fast);
  }

  .image-container:hover {
    transform: translateY(-10px);
    box-shadow: 0 30px 80px rgba(0, 0, 0, 0.4);
  }

  .team-photo {
    width: 100%;
    height: auto;
    display: block;
    transition: var(--transition-fast);
  }

  .image-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(
      135deg,
      rgba(0, 169, 255, 0.1) 0%,
      rgba(0, 169, 255, 0.3) 100%
    );
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    transition: var(--transition-fast);
  }

  .image-container:hover .image-overlay {
    opacity: 1;
  }

  .play-button {
    width: 80px;
    height: 80px;
    background-color: var(--accent-blue);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    cursor: pointer;
    transition: var(--transition-fast);
    transform: scale(0.8);
  }

  .image-container:hover .play-button {
    transform: scale(1);
  }

  .play-button:hover {
    background-color: #0088CC;
    transform: scale(1.1);
  }

  .play-button svg {
    width: 32px;
    height: 32px;
    margin-left: 4px;
  }

  /* Content Section */
  .about-content {
    padding-left: 1rem;
  }

  .section-title {
    color: var(--text-main);
    margin-bottom: 1.5rem;
    position: relative;
  }

  .section-title::after {
    content: '';
    position: absolute;
    bottom: -10px;
    left: 0;
    width: 60px;
    height: 4px;
    background: linear-gradient(90deg, var(--accent-blue), transparent);
    border-radius: 2px;
  }

  .about-text {
    margin-bottom: 2rem;
  }

  .lead {
    font-size: 1.2rem;
    color: var(--text-main);
    font-weight: 500;
    margin-bottom: 1rem;
  }

  .about-text p {
    color: var(--text-secondary);
    line-height: 1.7;
  }

  /* Services Pillars */
  .services-pillars {
    display: grid;
    grid-template-columns: 1fr;
    gap: 1rem;
    margin-bottom: 2rem;
  }

  .pillar {
    display: flex;
    align-items: flex-start;
    gap: 1rem;
    padding: 1rem;
    background: rgba(31, 31, 31, 0.5);
    border-radius: 12px;
    border: 1px solid rgba(0, 169, 255, 0.1);
    transition: var(--transition-fast);
  }

  .pillar:hover {
    background: rgba(31, 31, 31, 0.8);
    border-color: rgba(0, 169, 255, 0.3);
    transform: translateX(10px);
  }

  .pillar-icon {
    flex-shrink: 0;
    width: 48px;
    height: 48px;
    background: linear-gradient(135deg, var(--accent-blue), #0088CC);
    border-radius: 12px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
  }

  .pillar-icon svg {
    width: 24px;
    height: 24px;
  }

  .pillar h3 {
    color: var(--text-main);
    margin: 0 0 0.5rem 0;
    font-size: 1.2rem;
  }

  .pillar p {
    color: var(--text-secondary);
    margin: 0;
    line-height: 1.5;
  }

  /* Statistics */
  .stats {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 1rem;
  }

  .stat {
    text-align: center;
    padding: 1rem;
    background: linear-gradient(135deg, rgba(0, 169, 255, 0.1), rgba(0, 169, 255, 0.05));
    border-radius: 12px;
    border: 1px solid rgba(0, 169, 255, 0.2);
  }

  .stat-number {
    display: block;
    font-size: 2.5rem;
    font-weight: 800;
    color: var(--accent-blue);
    font-family: var(--font-heading);
    line-height: 1;
    margin-bottom: 0.5rem;
  }

  .stat-label {
    font-size: 0.9rem;
    color: var(--text-secondary);
    font-weight: 500;
  }

  /* Responsive */
  @media (max-width: 1024px) {
    .about-grid {
      gap: 3rem;
    }

    .about-content {
      padding-left: 1rem;
    }
  }

  @media (max-width: 768px) {
    .about-grid {
      grid-template-columns: 1fr;
      gap: 3rem;
    }

    .about-content {
      padding-left: 0;
    }

    .services-pillars {
      grid-template-columns: 1fr;
      gap: 1.5rem;
    }

    .pillar {
      padding: 1.5rem;
      text-align: center;
    }

    .stats {
      grid-template-columns: repeat(2, 1fr);
      gap: 1rem;
    }

    .stat {
      padding: 1rem;
    }

    .stat-number {
      font-size: 2rem;
    }
  }

  @media (max-width: 480px) {
    .about-grid {
      gap: 2rem;
    }

    .services-pillars {
      gap: 1rem;
    }

    .pillar {
      padding: 1rem;
    }

    .pillar-icon {
      width: 40px;
      height: 40px;
    }

    .stats {
      grid-template-columns: 1fr;
      gap: 1rem;
    }

    .image-container {
      border-radius: 12px;
    }

    .play-button {
      width: 60px;
      height: 60px;
    }

    .play-button svg {
      width: 24px;
      height: 24px;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Counter animation
    const animateCounters = () => {
      const counters = document.querySelectorAll('.stat-number');
      
      counters.forEach(counter => {
        const htmlCounter = counter as HTMLElement;
        const target = parseInt(htmlCounter.dataset.count || '0');
        const duration = 2000;
        const step = target / (duration / 16);
        let current = 0;

        const updateCounter = () => {
          current += step;
          if (current >= target) {
            htmlCounter.textContent = target + '+';
          } else {
            htmlCounter.textContent = Math.floor(current).toString();
            requestAnimationFrame(updateCounter);
          }
        };

        updateCounter();
      });
    };

    // Intersection observer for animations
    const observerOptions = {
      threshold: 0.3,
      rootMargin: '0px 0px -50px 0px'
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('fade-in-up');
          
          // Trigger counter animation when stats are visible
          if (entry.target.classList.contains('stats')) {
            animateCounters();
          }
        }
      });
    }, observerOptions);

    // Observe elements for animation
    document.querySelectorAll('.about-image, .about-content > *, .pillar, .stat').forEach(el => {
      observer.observe(el);
    });

    // Play button click handler (future video modal)
    const playButton = document.querySelector('.play-button');
    playButton?.addEventListener('click', () => {
      // Future implementation: open video modal
      console.log('Video modal would open here');
    });

    // Parallax effect for image on desktop
    if (window.innerWidth > 768) {
      const handleScroll = () => {
        const scrolled = window.pageYOffset;
        const aboutSection = document.querySelector('.about-section');
        const aboutImage = document.querySelector('.about-image') as HTMLElement;
        
        if (aboutSection && aboutImage) {
          const rect = aboutSection.getBoundingClientRect();
          if (rect.top < window.innerHeight && rect.bottom > 0) {
            const rate = scrolled * 0.1;
            aboutImage.style.transform = `translateY(${rate}px)`;
          }
        }
      };

      window.addEventListener('scroll', handleScroll, { passive: true });
    }
  });
</script>
