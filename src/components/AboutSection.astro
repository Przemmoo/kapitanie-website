---
// Sekcja O Nas z dwukolumnowym layoutem
import LucideIcon from './LucideIcon.astro';

import { marked } from 'marked';
marked.setOptions({ breaks: true });

export interface Props {
  data?: {
    title?: string;
    description?: string;
    team_image?: string;
    pillars?: Array<{
      icon: string;
      title: string;
      description: string;
      content?: string; // Nowe pole markdown
    }>;
    stats?: Array<{
      number: string;
      label: string;
    }>;
  };
}

const { data } = Astro.props;

// Fallback values jeśli brak danych z CMS
const aboutData = {
  title: data?.title || "Kapitan na pokładzie Twojego eventu",
  description: data?.description || "Witaj na pokładzie! Nazywam się [Imię Założyciela] i jestem kapitanem, który od ponad 10 lat bezpiecznie prowadzi wydarzenia przez wszystkie, nawet najbardziej wzburzone, wody technicznych wyzwań.",
  team_image: data?.team_image || "/images/team-kapitanie.jpg",
  pillars: data?.pillars?.map(p => ({
    ...p,
    content: p.content || '',
  })) || [
    {
      icon: "lightbulb",
      title: "Oświetlenie",
      description: "Profesjonalne systemy oświetleniowe, które nadają Twojemu wydarzeniu właściwy nastrój i charakter.",
      content: "**Przykładowa treść**\n\n- List punktowany\n- Druga linia"
    },
    {
      icon: "mic",
      title: "Nagłośnienie", 
      description: "Krystalicznie czyste brzmienie dzięki najnowocześniejszemu sprzętowi audio i profesjonalnej obsłudze.",
      content: "**Nagłośnienie**\n\nOpis markdown dla nagłośnienia."
    },
    {
      icon: "monitor",
      title: "Multimedia",
      description: "Zaawansowane systemy wizualne, ekrany LED i projekcje, które przeniosą Twoich gości w inny wymiar.",
      content: "**Multimedia**\n\nOpis markdown dla multimediów."
    }
  ],
  stats: data?.stats || [
    { number: "150", label: "Zrealizowanych eventów" },
    { number: "10", label: "Lat doświadczenia" },
    { number: "50", label: "Zadowolonych klientów" }
  ]
};
---

<section id="o-nas" class="section about-section">
  <div class="container">
    <!-- Nagłówek i opis główny - wycentrowane na całą szerokość -->
    <div class="section-header">
      <h2 class="section-title">
        {aboutData.title}
      </h2>
      <p class="section-intro" set:html={aboutData.description.replace(/\n/g, '<br />')}>
      </p>
    </div>
    <!-- Główna siatka: lewa treść filaru, prawa filary i statystyki -->
    <div class="about-grid">
      <!-- Lewa strona - treść filaru -->
      <div class="about-image about-pillar-content">
        <div class="pillar-content-container" id="pillar-content-container">
          <!-- Treść filaru wstawiana dynamicznie przez JS -->
        </div>
      </div>
      <!-- Prawa strona - filary i statystyki -->
      <div class="about-content">
        <div class="services-pillars">
          {aboutData.pillars.map((pillar, idx) => (
            <div class="pillar" data-pillar-idx={idx} tabindex="0">
              <div class="pillar-icon">
                <LucideIcon name={pillar.icon} size={32} strokeWidth={2} />
              </div>
              <h3>{pillar.title}</h3>
              <p set:html={pillar.description.replace(/\n/g, '<br />')}></p>
            </div>
          ))}
        </div>
        <div class="stats">
          {aboutData.stats.map((stat) => (
            <div class="stat">
              <span class="stat-number" data-count={stat.number}>0</span>
              <span class="stat-label">{stat.label}</span>
            </div>
          ))}
        </div>
      </div>
    </div>
    <!-- Modal na zdjęcie/wideo -->
    <div class="about-lightbox-modal" id="about-lightbox-modal" aria-hidden="true">
      <div class="about-lightbox-backdrop"></div>
      <div class="about-lightbox-content">
        <button class="about-lightbox-close" id="about-lightbox-close" aria-label="Zamknij podgląd">
          <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <line x1="18" y1="6" x2="6" y2="18"/>
            <line x1="6" y1="6" x2="18" y2="18"/>
          </svg>
        </button>
        <div class="about-lightbox-body" id="about-lightbox-body"></div>
      </div>
    </div>
  </div>
</section>

<style>
  .about-section {
    background-color: var(--bg-main);
    position: relative;
  }

  .section-header {
    text-align: center;
    margin-bottom: 4rem;
    max-width: 800px;
    margin-left: auto;
    margin-right: auto;
  }

  .section-title {
    color: var(--text-main);
    margin-bottom: 1.5rem;
    font-size: 2.5rem;
  }

  .section-intro {
    font-size: 1.2rem;
    color: var(--text-secondary);
    line-height: 1.6;
    margin: 0;
  }

  .about-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 2rem;
    align-items: center;
    min-height: 500px;
  }

  /* Image Section */
  .about-image {
    position: relative;
  }

  .image-container {
    position: relative;
    border-radius: 20px;
    overflow: hidden;
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
    transition: var(--transition-fast);
  }

  .image-container:hover {
    transform: translateY(-10px);
    box-shadow: 0 30px 80px rgba(0, 0, 0, 0.4);
  }

  .team-photo {
    width: 100%;
    height: auto;
    display: block;
    transition: var(--transition-fast);
  }

  .team-media {
    width: 100%;
    height: auto;
    display: block;
    transition: var(--transition-fast);
  }

  .image-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(135deg, rgba(18, 18, 18, 0.9) 0%, rgba(0, 169, 255, 0.85) 100%);
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    transition: var(--transition);
    cursor: pointer;
    backdrop-filter: blur(2px);
  }

  .image-container:hover .image-overlay {
    opacity: 1;
  }

  .image-overlay .play-button {
    cursor: pointer;
  }

  .image-overlay .about-cursor-hand {
    width: 48px;
    height: 48px;
    color: var(--accent-blue);
    display: flex;
    align-items: center;
    justify-content: center;
    background: none;
    border: none;
    pointer-events: none;
  }

  /* Content Section */
  .about-content {
    padding-left: 1rem;
  }

  /* Services Pillars */
  .services-pillars {
    display: grid;
    grid-template-columns: 1fr;
    gap: 1rem;
    margin-bottom: 2rem;
  }

  .pillar {
    display: flex;
    align-items: flex-start;
    gap: 1rem;
    padding: 1rem;
    background: rgba(31, 31, 31, 0.5);
    border-radius: 12px;
    border: 1px solid rgba(0, 169, 255, 0.1);
    transition: var(--transition-fast);
  }

  .pillar:hover {
    background: rgba(31, 31, 31, 0.8);
    border-color: rgba(0, 169, 255, 0.3);
    transform: translateX(10px);
  }

  .pillar-icon {
    flex-shrink: 0;
    width: 48px;
    height: 48px;
    background: linear-gradient(135deg, var(--accent-blue), #0088CC);
    border-radius: 12px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
  }

  .pillar-icon svg {
    width: 24px;
    height: 24px;
  }

  .pillar h3 {
    color: var(--text-main);
    margin: 0 0 0.5rem 0;
    font-size: 1.2rem;
  }

  .pillar p {
    color: var(--text-secondary);
    margin: 0;
    line-height: 1.5;
  }

  /* Statistics */
  .stats {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 1rem;
  }

  .stat {
    text-align: center;
    padding: 1rem;
    background: linear-gradient(135deg, rgba(0, 169, 255, 0.1), rgba(0, 169, 255, 0.05));
    border-radius: 12px;
    border: 1px solid rgba(0, 169, 255, 0.2);
  }

  .stat-number {
    display: block;
    font-size: 2.5rem;
    font-weight: 800;
    color: var(--accent-blue);
    font-family: var(--font-heading);
    line-height: 1;
    margin-bottom: 0.5rem;
  }

  .stat-label {
    font-size: 0.9rem;
    color: var(--text-secondary);
    font-weight: 500;
  }

  /* Modal Styles */
  .about-lightbox-modal {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: 1000;
    display: flex;
    align-items: center;
    justify-content: center;
    visibility: hidden;
    opacity: 0;
    pointer-events: none;
    background: rgba(18, 18, 18, 0.95);
    backdrop-filter: blur(8px);
    transition: opacity 0.35s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .about-lightbox-modal.open {
    visibility: visible;
    opacity: 1;
    pointer-events: auto;
  }

  .about-lightbox-content {
    position: relative;
    max-width: 1200px;
    max-height: 85vh;
    width: auto;
    height: auto;
    background: var(--bg-secondary);
    border-radius: 25px;
    overflow: hidden;
    transform: scale(0.92);
    transition: transform 0.35s cubic-bezier(0.4, 0, 0.2, 1), box-shadow 0.35s cubic-bezier(0.4, 0, 0.2, 1);
    border: 1px solid rgba(0, 169, 255, 0.2);
    box-shadow: 0 25px 60px rgba(0, 0, 0, 0.5);
    will-change: opacity, transform;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 0;
  }

  .about-lightbox-modal.open .about-lightbox-content {
    transform: scale(1);
  }

  .about-lightbox-close {
    position: absolute;
    top: 15px;
    right: 15px;
    width: 40px;
    height: 40px;
    background: rgba(18, 18, 18, 0.9);
    border: 2px solid rgba(0, 169, 255, 0.3);
    border-radius: 50%;
    color: var(--text-main);
    cursor: pointer;
    z-index: 10;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    backdrop-filter: blur(5px);
    display: flex;
    align-items: center;
    justify-content: center;
  }

  @media (min-width: 768px) {
    .about-lightbox-close {
      top: 25px;
      right: 25px;
      width: 45px;
      height: 45px;
    }
  }

  .about-lightbox-close:hover {
    background: var(--accent-blue);
    border-color: var(--accent-blue);
    transform: scale(1.1);
  }

  .about-lightbox-close svg {
    width: 20px;
    height: 20px;
  }

  @media (min-width: 768px) {
    .about-lightbox-close svg {
      width: 22px;
      height: 22px;
    }
  }

  .about-lightbox-body {
    width: auto;
    height: auto;
    min-width: 0;
    min-height: 0;
    max-width: 100vw;
    max-height: 85vh;
    display: flex;
    align-items: center;
    justify-content: center;
    background: var(--bg-main);
    border-radius: 10px;
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
    overflow: hidden;
    padding: 0;
  }

  .about-lightbox-body img, .about-lightbox-body video {
    max-width: 1200px !important;
    max-height: 85vh !important;
    width: auto !important;
    height: auto !important;
    object-fit: contain !important;
    border-radius: 10px !important;
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3) !important;
    transition: opacity 0.3s ease !important;
    background: transparent !important;
    display: block;
    margin: 0 auto;
  }

  /* Responsive */
  @media (max-width: 1024px) {
    .about-grid {
      gap: 3rem;
    }

    .about-content {
      padding-left: 1rem;
    }
    
    .about-lightbox-content {
      max-width: 98vw;
      width: auto;
      min-width: 0;
      border-radius: 14px;
      padding: 0;
    }
  }

  @media (max-width: 768px) {
    .about-grid {
      grid-template-columns: 1fr;
      gap: 3rem;
    }

    .about-content {
      padding-left: 0;
    }
    
    .about-lightbox-content {
      max-width: 98vw;
      width: auto;
      min-width: 0;
      border-radius: 14px;
      padding: 0;
    }
    .about-lightbox-body {
      width: auto;
      height: auto;
      min-width: 0;
      min-height: 0;
      max-width: 98vw;
      max-height: 98vh;
      border-radius: 10px;
      padding: 0;
    }
    .about-lightbox-body img, .about-lightbox-body video {
      max-width: 98vw !important;
      max-height: 98vh !important;
      width: auto !important;
      height: auto !important;
      border-radius: 10px !important;
    }
  }

  @media (max-width: 480px) {
    .about-lightbox-content {
      max-width: 100vw;
      width: auto;
      border-radius: 8px;
    }
    .about-lightbox-body {
      width: auto;
      height: auto;
      min-width: 0;
      min-height: 0;
      max-width: 100vw;
      max-height: 100vh;
      border-radius: 6px;
    }
    .about-lightbox-body img, .about-lightbox-body video {
      max-width: 100vw !important;
      max-height: 100vh !important;
      width: auto !important;
      height: auto !important;
      border-radius: 6px !important;
    }
  }

  /* Najmniejsze mobile: poprawa szerokości kontenera filarów i statystyk */
  @media (max-width: 480px) {
    .about-content {
      padding-left: 0;
      max-width: 100vw;
      width: 100%;
    }
    .services-pillars {
      grid-template-columns: 1fr;
      gap: 0.7rem;
      width: 100%;
      max-width: 100vw;
    }
    .pillar {
      flex-direction: row;
      gap: 0.7rem;
      padding: 0.7rem;
      font-size: 0.95rem;
      width: 100%;
      min-width: 0;
      box-sizing: border-box;
    }
    .pillar-icon {
      width: 38px;
      height: 38px;
      border-radius: 8px;
    }
    .pillar-icon svg {
      width: 18px;
      height: 18px;
    }
    .pillar h3 {
      font-size: 1rem;
      margin-bottom: 0.2rem;
    }
    .pillar p {
      font-size: 0.92rem;
    }
    .stats {
      grid-template-columns: 1fr;
      gap: 0.7rem;
      width: 100%;
      max-width: 100vw;
    }
    .stat {
      padding: 0.7rem;
      font-size: 1rem;
      border-radius: 8px;
    }
    .stat-number {
      font-size: 1.5rem;
    }
    .stat-label {
      font-size: 0.85rem;
    }
  }
</style>

</script>
<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Counter animation
    const animateCounters = () => {
      const counters = document.querySelectorAll('.stat-number');
      counters.forEach(counter => {
        const htmlCounter = counter as HTMLElement;
        const target = parseInt((htmlCounter.dataset?.count as string) || '0');
        const duration = 2000;
        const step = target / (duration / 16);
        let current = 0;
        const updateCounter = () => {
          current += step;
          if (current >= target) {
            htmlCounter.textContent = target + '+';
          } else {
            htmlCounter.textContent = Math.floor(current).toString();
            requestAnimationFrame(updateCounter);
          }
        };
        updateCounter();
      });
    };

    // Intersection observer for animations
    const observerOptions = {
      threshold: 0.3,
      rootMargin: '0px 0px -50px 0px'
    };
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('fade-in-up');
          if (entry.target.classList.contains('stats')) {
            animateCounters();
          }
        }
      });
    }, observerOptions);
    document.querySelectorAll('.about-image, .about-content > *, .pillar, .stat').forEach(el => {
      observer.observe(el);
    });

    // --- Nowa logika dla filarów ---
    const pillars = JSON.parse(document.getElementById('about-section-pillars-data')?.textContent || '[]');
    const pillarContentContainer = document.getElementById('pillar-content-container');
    let currentPillarIdx: number = 0;
    let pillarInterval: ReturnType<typeof setInterval> | null = null;
    let userInteracted = false;

    // @ts-ignore
    const markedLib = window.marked || (typeof marked !== 'undefined' ? marked : null);

    function renderPillarContent(idx: number) {
      if (!pillarContentContainer) return;
      const pillar = pillars[idx];
      if (!pillar) return;
      let html = '';
      if (markedLib) {
        html = markedLib.parse(pillar.content || '');
      } else {
        html = (pillar.content || '').replace(/\n/g, '<br />');
      }
      pillarContentContainer.innerHTML = `
        <div class="pillar-content-markdown">
          <h3>${pillar.title}</h3>
          <div>${html}</div>
        </div>
      `;
    }

    function setPillar(idx: number) {
      currentPillarIdx = idx;
      renderPillarContent(idx);
      // podświetl aktywny filar
      document.querySelectorAll('.pillar').forEach((el, i) => {
        (el as HTMLElement).classList.toggle('active', i === idx);
      });
    }

    function nextPillar() {
      let nextIdx = (currentPillarIdx + 1) % pillars.length;
      setPillar(nextIdx);
    }

    // Rotacja co 30s
    function startPillarRotation() {
      if (pillarInterval) clearInterval(pillarInterval);
      pillarInterval = setInterval(() => {
        if (!userInteracted) nextPillar();
      }, 30000);
    }

    // Obsługa kliknięcia filaru
    document.querySelectorAll('.pillar').forEach((el, idx) => {
      el.addEventListener('click', () => {
        userInteracted = true;
        setPillar(idx);
      });
      el.addEventListener('keydown', (e) => {
        const event = e as KeyboardEvent;
        if (event.key === 'Enter' || event.key === ' ') {
          userInteracted = true;
          setPillar(idx);
        }
      });
    });

    // Inicjalizacja
    setPillar(0);
    startPillarRotation();
  });
</script>
<script type="application/json" id="about-section-pillars-data">{JSON.stringify(aboutData.pillars)}</script>
</script>
