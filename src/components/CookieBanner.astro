---
// Cookie Banner zgodny z RODO/GDPR
---

<!-- Cookie Banner -->
<div id="cookie-banner" class="cookie-banner" style="display: none;">
  <div class="cookie-banner-content">
    <div class="cookie-banner-text">
      <div class="cookie-icon">
        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <circle cx="12" cy="12" r="10"/>
          <circle cx="12" cy="12" r="4"/>
          <circle cx="8" cy="8" r="1"/>
          <circle cx="16" cy="8" r="1"/>
          <circle cx="8" cy="16" r="1"/>
          <circle cx="16" cy="16" r="1"/>
        </svg>
      </div>
      <div>
        <h3>Używamy plików cookies</h3>
        <p>
          Ta strona używa plików cookies aby zapewnić najlepsze doświadczenia. 
          Kontynuując przeglądanie wyrażasz zgodę na ich używanie.
        </p>
      </div>
    </div>
    
    <div class="cookie-banner-actions">
      <button onclick="acceptAllCookies()" class="cookie-btn cookie-btn-accept">
        Akceptuj wszystkie
      </button>
      <button onclick="acceptNecessaryCookies()" class="cookie-btn cookie-btn-necessary">
        Tylko niezbędne
      </button>
      <button onclick="openCookieSettings()" class="cookie-btn cookie-btn-settings">
        Ustawienia
      </button>
    </div>
  </div>
</div>

<!-- Cookie Settings Button (always visible) -->
<button id="cookie-settings-btn" class="cookie-settings-btn" onclick="openCookieSettings()" aria-label="Ustawienia cookies" title="Ustawienia cookies">
  <svg viewBox="0 0 24 24" fill="currentColor" stroke="none">
    <circle cx="12" cy="12" r="10" fill="currentColor"/>
    <circle cx="8" cy="8" r="1.5" fill="#00A9FF"/>
    <circle cx="16" cy="7" r="1" fill="#00A9FF"/>
    <circle cx="7" cy="15" r="1" fill="#00A9FF"/>
    <circle cx="15" cy="16" r="1.5" fill="#00A9FF"/>
    <circle cx="12" cy="6" r="0.8" fill="#00A9FF"/>
    <circle cx="18" cy="13" r="0.8" fill="#00A9FF"/>
    <circle cx="9" cy="18" r="0.8" fill="#00A9FF"/>
  </svg>
</button>

<!-- Cookie Settings Modal -->
<div id="cookie-settings" class="cookie-settings-modal" style="display: none;" onclick="closeModalOnOverlay(event)">
  <div class="cookie-settings-content" onclick="event.stopPropagation()">
    <div class="cookie-settings-header">
      <h3>Ustawienia cookies</h3>
      <button onclick="document.getElementById('cookie-settings').style.display='none'" class="cookie-close">
        ×
      </button>
    </div>
    
    <div class="cookie-settings-body">
      <div class="cookie-category">
        <label class="cookie-toggle">
          <input type="checkbox" checked disabled>
          <span class="toggle-slider"></span>
          <div class="cookie-category-info">
            <strong>Niezbędne cookies</strong>
            <p>Te pliki są konieczne do działania strony i nie można ich wyłączyć.</p>
          </div>
        </label>
      </div>
      
      <div class="cookie-category">
        <label class="cookie-toggle">
          <input type="checkbox" id="analytics-toggle">
          <span class="toggle-slider"></span>
          <div class="cookie-category-info">
            <strong>Analityczne cookies</strong>
            <p>Pomagają nam zrozumieć jak korzystasz ze strony.</p>
          </div>
        </label>
      </div>
      
      <div class="cookie-category">
        <label class="cookie-toggle">
          <input type="checkbox" id="marketing-toggle">
          <span class="toggle-slider"></span>
          <div class="cookie-category-info">
            <strong>Marketingowe cookies</strong>
            <p>Używane do personalizacji reklam.</p>
          </div>
        </label>
      </div>
      
      <div class="cookie-category">
        <label class="cookie-toggle">
          <input type="checkbox" id="functional-toggle">
          <span class="toggle-slider"></span>
          <div class="cookie-category-info">
            <strong>Funkcjonalne cookies</strong>
            <p>Umożliwiają zapamiętanie preferencji użytkownika.</p>
          </div>
        </label>
      </div>
    </div>
    
    <div class="cookie-settings-footer">
      <button onclick="saveCookieSettings()" class="cookie-btn cookie-btn-save">
        Zapisz ustawienia
      </button>
    </div>
  </div>
</div>

<style>
  .cookie-banner {
    position: fixed;
    bottom: 0;
    left: 0;
    right: 0;
    background: var(--bg-secondary);
    border-top: 1px solid rgba(0, 169, 255, 0.2);
    padding: 1.5rem;
    z-index: 10000;
    box-shadow: 0 -4px 12px rgba(0, 0, 0, 0.3);
  }

  .cookie-banner-content {
    max-width: 1200px;
    margin: 0 auto;
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 2rem;
  }

  .cookie-banner-text {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .cookie-icon {
    width: 40px;
    height: 40px;
    background: var(--accent-blue);
    border-radius: 10px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    flex-shrink: 0;
  }

  .cookie-icon svg {
    width: 24px;
    height: 24px;
  }

  .cookie-banner-text h3 {
    color: var(--text-main);
    margin: 0 0 0.5rem 0;
    font-size: 1.1rem;
  }

  .cookie-banner-text p {
    color: var(--text-secondary);
    margin: 0;
    font-size: 0.95rem;
    line-height: 1.4;
  }

  .cookie-banner-actions {
    display: flex;
    gap: 1rem;
    flex-shrink: 0;
  }

  .cookie-btn {
    padding: 0.75rem 1.5rem;
    border: none;
    border-radius: 8px;
    font-size: 0.9rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
    white-space: nowrap;
  }

  .cookie-btn-accept {
    background: var(--accent-blue);
    color: white;
  }

  .cookie-btn-accept:hover {
    background: #0084cc;
  }

  .cookie-btn-necessary {
    background: transparent;
    color: var(--text-secondary);
    border: 1px solid var(--text-secondary);
  }

  .cookie-btn-necessary:hover {
    background: var(--text-secondary);
    color: var(--bg-main);
  }

  .cookie-btn-settings {
    background: transparent;
    color: var(--accent-blue);
    border: 1px solid var(--accent-blue);
  }

  .cookie-btn-settings:hover {
    background: var(--accent-blue);
    color: white;
  }

  /* Settings Modal */
  .cookie-settings-modal {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.8);
    backdrop-filter: blur(4px);
    z-index: 10001;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 2rem;
    animation: fadeIn 0.3s ease;
  }

  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }

  .cookie-settings-content {
    background: linear-gradient(135deg, var(--bg-secondary) 0%, #1a1a1a 100%);
    border: 1px solid rgba(0, 169, 255, 0.3);
    border-radius: 16px;
    max-width: 600px;
    width: 100%;
    max-height: 70vh;
    overflow-y: auto;
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.6);
    animation: slideUp 0.3s ease;
  }

  @keyframes slideUp {
    from { 
      opacity: 0;
      transform: translateY(20px) scale(0.95);
    }
    to { 
      opacity: 1;
      transform: translateY(0) scale(1);
    }
  }

  .cookie-settings-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1.5rem 1.5rem 1rem 1.5rem;
    border-bottom: 1px solid rgba(0, 169, 255, 0.2);
    background: linear-gradient(90deg, rgba(0, 169, 255, 0.1) 0%, transparent 100%);
  }

  .cookie-settings-header h3 {
    color: var(--text-main);
    margin: 0;
    font-size: 1.2rem;
    font-weight: 600;
  }

  .cookie-close {
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    color: var(--text-secondary);
    font-size: 1.2rem;
    cursor: pointer;
    padding: 0;
    width: 36px;
    height: 36px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 8px;
    transition: all 0.3s ease;
  }

  .cookie-close:hover {
    background: rgba(223, 1, 1, 0.2);
    border-color: rgba(239, 68, 68, 0.5);
    color: #ef4444;
    transform: scale(1.1);
  }

  .cookie-settings-body {
    padding: 1.5rem 1.5rem 0rem 1.5rem;
  }

  .cookie-category {
    margin-bottom: 1.2rem;
    padding: 1rem;
    background: rgba(0, 169, 255, 0.05);
    border: 1px solid rgba(0, 169, 255, 0.1);
    border-radius: 12px;
    transition: all 0.3s ease;
  }

  .cookie-category:hover {
    background: rgba(0, 169, 255, 0.08);
    border-color: rgba(0, 169, 255, 0.2);
    transform: translateY(-2px);
  }

  .cookie-toggle {
    display: flex;
    align-items: flex-start;
    gap: 1rem;
    cursor: pointer;
  }

  .cookie-toggle input[type="checkbox"] {
    display: none;
  }

  .toggle-slider {
    width: 52px;
    height: 28px;
    background: linear-gradient(135deg, #ccc 0%, #aaa 100%);
    border-radius: 14px;
    position: relative;
    transition: all 0.3s ease;
    flex-shrink: 0;
    margin-top: 2px;
    box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.2);
  }

  .toggle-slider::before {
    content: '';
    position: absolute;
    width: 24px;
    height: 24px;
    background: linear-gradient(135deg, #fff 0%, #f0f0f0 100%);
    border-radius: 50%;
    top: 2px;
    left: 2px;
    transition: all 0.3s ease;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
  }

  .cookie-toggle input:checked + .toggle-slider {
    background: linear-gradient(135deg, var(--accent-blue) 0%, #0084cc 100%);
    box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.1), 0 0 10px rgba(0, 169, 255, 0.3);
  }

  .cookie-toggle input:checked + .toggle-slider::before {
    transform: translateX(24px);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.4);
  }

  .cookie-toggle input:disabled + .toggle-slider {
    background: linear-gradient(135deg, var(--accent-blue) 0%, #0084cc 100%);
    opacity: 0.8;
    cursor: not-allowed;
    box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .cookie-category-info strong {
    color: var(--text-main);
    display: block;
    margin-bottom: 0.3rem;
    font-size: 1rem;
    font-weight: 600;
  }

  .cookie-category-info p {
    color: var(--text-secondary);
    margin: 0;
    font-size: 0.9rem;
    line-height: 1.4;
    opacity: 0.9;
  }

  .cookie-settings-footer {
    padding: 1.5rem;
    border-top: 1px solid rgba(0, 169, 255, 0.2);
    background: linear-gradient(90deg, transparent 0%, rgba(0, 169, 255, 0.05) 100%);
    text-align: center;
  }

  .cookie-btn-save {
    background: linear-gradient(135deg, var(--accent-blue) 0%, #0084cc 100%);
    color: white;
    padding: 0.8rem 2rem;
    font-size: 0.95rem;
    font-weight: 600;
    border-radius: 10px;
    box-shadow: 0 4px 12px rgba(0, 169, 255, 0.3);
    transition: all 0.3s ease;
  }

  .cookie-btn-save:hover {
    background: linear-gradient(135deg, #0084cc 0%, #006bb3 100%);
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(0, 169, 255, 0.4);
  }

  /* Cookie Settings Button (floating) */
  .cookie-settings-btn {
    position: fixed;
    bottom: 2rem;
    left: 2rem;
    width: 50px;
    height: 50px;
    background: var(--accent-blue);
    border: none;
    border-radius: 50%;
    color: white;
    cursor: pointer;
    box-shadow: 0 4px 12px rgba(0, 169, 255, 0.3);
    transition: all 0.3s ease;
    z-index: 9999;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .cookie-settings-btn:hover {
    background: #0084cc;
    transform: scale(1.1);
    box-shadow: 0 6px 20px rgba(0, 169, 255, 0.4);
  }

  .cookie-settings-btn svg {
    width: 50px;
    height: 50px;
  }

  /* Hide settings button when banner is visible */
  .cookie-banner:not([style*="display: none"]) ~ .cookie-settings-btn {
    display: none;
  }

  /* Mobile responsive */
  @media (max-width: 768px) {
    .cookie-banner-content {
      flex-direction: column;
      align-items: stretch;
      gap: 1rem;
    }

    .cookie-banner-actions {
      justify-content: center;
      flex-wrap: wrap;
    }

    .cookie-btn {
      flex: 1;
      min-width: 120px;
    }

    .cookie-settings-modal {
      padding: 0.5rem;
    }

    .cookie-settings-content {
      max-height: 90vh;
    }

    .cookie-settings-header,
    .cookie-settings-body,
    .cookie-settings-footer {
      padding: 1rem;
    }

    .cookie-category {
      margin-bottom: 1rem;
      padding: 0.8rem;
    }

    .cookie-toggle {
      align-items: flex-start;
    }

    .cookie-settings-btn {
      bottom: 1.5rem;
      left: 1.5rem;
      width: 35px;
      height: 35px;
    }

    .cookie-settings-btn svg {
      width: 50px;
      height: 50px;
    }
  }
</style>

<script is:inline>
  // Save cookie settings
  window.saveCookieSettings = () => {
    const analytics = document.getElementById('analytics-toggle');
    const marketing = document.getElementById('marketing-toggle');
    const functional = document.getElementById('functional-toggle');
    
    // Validate that elements exist
    if (!analytics || !marketing || !functional) {
      console.error('Cookie settings elements not found');
      return;
    }
    
    const settings = {
      necessary: true,
      analytics: analytics.checked,
      marketing: marketing.checked,
      functional: functional.checked,
      timestamp: Date.now()
    };
    
    try {
      // Save preferences to localStorage
      localStorage.setItem('cookie_consent', JSON.stringify(settings));
      
      // Hide modal and banner
      document.getElementById('cookie-settings').style.display = 'none';
      document.getElementById('cookie-banner').style.display = 'none';
      
      // Show settings button after saving
      const settingsBtn = document.getElementById('cookie-settings-btn');
      if (settingsBtn) settingsBtn.style.display = 'flex';
      
      // Trigger custom event for other parts of the app
      window.dispatchEvent(new CustomEvent('cookieSettingsChanged', { 
        detail: settings 
      }));
      
    } catch (error) {
      console.error('Error saving cookie settings:', error);
    }
  };

  // Initialize cookie banner on page load
  document.addEventListener('DOMContentLoaded', () => {
    // Check if cookies consent was already given
    const cookieConsent = localStorage.getItem('cookie_consent');
    const settingsBtn = document.getElementById('cookie-settings-btn');
    
    if (!cookieConsent) {
      // Show banner after a short delay
      setTimeout(() => {
        document.getElementById('cookie-banner').style.display = 'block';
        // Hide settings button when banner is visible
        if (settingsBtn) settingsBtn.style.display = 'none';
      }, 1000);
    } else {
      // Show settings button if consent was given
      if (settingsBtn) settingsBtn.style.display = 'flex';
    }
  });

  // Simple cookie functions for immediate use
  window.acceptAllCookies = () => {
    const settings = {
      necessary: true,
      analytics: true,
      marketing: true,
      functional: true,
      timestamp: Date.now()
    };
    
    try {
      localStorage.setItem('cookie_consent', JSON.stringify(settings));
      
      document.getElementById('cookie-banner').style.display = 'none';
      
      // Show settings button after accepting
      const settingsBtn = document.getElementById('cookie-settings-btn');
      if (settingsBtn) settingsBtn.style.display = 'flex';
      
      // Trigger custom event
      window.dispatchEvent(new CustomEvent('cookieSettingsChanged', { 
        detail: settings 
      }));
      
    } catch (error) {
      console.error('Error accepting all cookies:', error);
    }
  };

  window.acceptNecessaryCookies = () => {
    const settings = {
      necessary: true,
      analytics: false,
      marketing: false,
      functional: false,
      timestamp: Date.now()
    };
    
    try {
      localStorage.setItem('cookie_consent', JSON.stringify(settings));
      
      document.getElementById('cookie-banner').style.display = 'none';
      
      // Show settings button after accepting
      const settingsBtn = document.getElementById('cookie-settings-btn');
      if (settingsBtn) settingsBtn.style.display = 'flex';
      
      // Trigger custom event
      window.dispatchEvent(new CustomEvent('cookieSettingsChanged', { 
        detail: settings 
      }));
      
    } catch (error) {
      console.error('Error accepting necessary cookies:', error);
    }
  };

  window.openCookieSettings = () => {
    // Load current settings before showing modal
    loadCookieSettings();
    document.getElementById('cookie-settings').style.display = 'flex';
  };

  // Load and apply current cookie settings to checkboxes
  window.loadCookieSettings = () => {
    const cookieConsent = localStorage.getItem('cookie_consent');
    if (cookieConsent) {
      try {
        const settings = JSON.parse(cookieConsent);
        
        // Set checkbox states based on saved preferences
        const analyticsToggle = document.getElementById('analytics-toggle');
        const marketingToggle = document.getElementById('marketing-toggle');
        const functionalToggle = document.getElementById('functional-toggle');
        
        if (analyticsToggle) analyticsToggle.checked = settings.analytics || false;
        if (marketingToggle) marketingToggle.checked = settings.marketing || false;
        if (functionalToggle) functionalToggle.checked = settings.functional || false;
        
      } catch (error) {
        console.error('Error loading cookie settings:', error);
      }
    }
  };

  // Close modal when clicking outside content area
  window.closeModalOnOverlay = (event) => {
    if (event.target === event.currentTarget) {
      document.getElementById('cookie-settings').style.display = 'none';
    }
  };

  // Utility function to check if specific cookie type is allowed
  window.isCookieAllowed = (cookieType) => {
    const cookieConsent = localStorage.getItem('cookie_consent');
    if (!cookieConsent) return false;
    
    try {
      const settings = JSON.parse(cookieConsent);
      return settings[cookieType] || false;
    } catch (error) {
      console.error('Error checking cookie permission:', error);
      return false;
    }
  };

  // Get all cookie settings as object
  window.getCookieSettings = () => {
    const cookieConsent = localStorage.getItem('cookie_consent');
    if (!cookieConsent) return null;
    
    try {
      return JSON.parse(cookieConsent);
    } catch (error) {
      console.error('Error getting cookie settings:', error);
      return null;
    }
  };
</script>
